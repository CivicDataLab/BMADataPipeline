"""add rainfall, flood sensors and riskpoint tables

Revision ID: 6c242567bbbc
Revises: 27ebbc3dc32b
Create Date: 2025-04-28 23:50:54.340278

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6c242567bbbc'
down_revision: Union[str, None] = '27ebbc3dc32b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('flood_sensor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('road', sa.String(length=255), nullable=True),
    sa.Column('district', sa.String(length=255), nullable=True),
    sa.Column('lat', sa.String(length=255), nullable=True),
    sa.Column('long', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rainfall_sensor',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=255), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('district', sa.String(length=255), nullable=True),
    sa.Column('latitude', sa.String(length=255), nullable=True),
    sa.Column('longitude', sa.String(length=255), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rainfall_sensor_streaming_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=255), nullable=True),
    sa.Column('sensor_id', sa.Integer(), nullable=True),
    sa.Column('rf24rh', sa.Float(), nullable=True),
    sa.Column('site_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['sensor_id'], ['rainfall_sensor.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('risk_points',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('objectid', sa.Integer(), nullable=True),
    sa.Column('rainfall_sensor_id', sa.Integer(), nullable=True),
    sa.Column('closest_rainfall_sensor_code', sa.String(length=255), nullable=True),
    sa.Column('closest_rainfall_sensor_distance', sa.Float(), nullable=True),
    sa.Column('road_flood_sensor_id', sa.Integer(), nullable=True),
    sa.Column('closest_road_flood_sensor_code', sa.String(length=255), nullable=True),
    sa.Column('closest_road_flood_sensor_distance', sa.Float(), nullable=True),
    sa.Column('risk_name', sa.String(length=255), nullable=True),
    sa.Column('problems', sa.String(length=255), nullable=True),
    sa.Column('district_t', sa.String(length=255), nullable=True),
    sa.Column('group_t', sa.String(length=255), nullable=True),
    sa.Column('status_num', sa.Integer(), nullable=True),
    sa.Column('status_det', sa.String(length=255), nullable=True),
    sa.Column('long', sa.String(length=255), nullable=True),
    sa.Column('lat', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['rainfall_sensor_id'], ['rainfall_sensor.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['road_flood_sensor_id'], ['flood_sensor.id'], onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_table('playing_with_neon')
    op.alter_column('bangkok_budget', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    op.alter_column('bangkok_budget', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('bangkok_budget', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.alter_column('bangkok_budget', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True)
    op.create_table('playing_with_neon',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.REAL(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='playing_with_neon_pkey')
    )
    op.drop_table('risk_points')
    op.drop_table('rainfall_sensor_streaming_data')
    op.drop_table('rainfall_sensor')
    op.drop_table('flood_sensor')
    # ### end Alembic commands ###
